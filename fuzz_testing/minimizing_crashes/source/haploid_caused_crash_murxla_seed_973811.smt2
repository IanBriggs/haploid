(set-option :global-declarations true)
(set-logic QF_ALL)
(set-option :produce-unsat-assumptions true)
(set-option :produce-models true)
(define-sort _s0 (_y0 _y0) _y0)
(declare-fun _x0 (Bool Bool) Bool)
(declare-fun _x1 (Bool Bool) Bool)
(declare-fun _x2 (Bool Bool) Bool)
(declare-fun _x3 (Bool Bool) Bool)
(declare-fun _x4 (Bool Bool) Bool)
(declare-fun _x5 (Bool Bool) Bool)
(declare-fun _x6 (Bool Bool) Bool)
(declare-fun _x7 (Bool Bool) Bool)
(declare-fun _x8 (Bool Bool) Bool)
(declare-fun _x9 (Bool Bool) Bool)
(declare-fun _x10 (Bool Bool) Bool)
(declare-fun _x11 (Bool Bool) Bool)
(declare-fun _x12 (Bool Bool) Bool)
(declare-fun _x13 (Bool Bool) Bool)
(declare-fun _x14 (Bool Bool) Bool)
(declare-fun _x15 (Bool Bool) Bool)
(declare-fun _x16 (Bool Bool) Bool)
(declare-fun _x17 (Bool Bool) Bool)
(declare-fun _x18 (Bool Bool) Bool)
(declare-fun _x19 (Bool Bool) Bool)
(declare-fun _x20 (Bool Bool) Bool)
(declare-fun _x21 (Bool Bool) Bool)
(declare-fun _x22 (Bool Bool) Bool)
(declare-fun _x23 (Bool Bool) Bool)
(declare-fun _x24 (Bool Bool) Bool)
(declare-fun _x25 (Bool Bool) Bool)
(declare-fun _x26 (Bool Bool) Bool)
(declare-fun _x27 (Bool Bool) Bool)
(declare-fun _x28 (Bool Bool) Bool)
(declare-fun _x29 (Bool Bool) Bool)
(declare-fun _x30 (Bool Bool) Bool)
(declare-const _x31 Bool)
(declare-const _x32 Bool)
(declare-fun _x33 (Bool Bool) Bool)
(declare-fun _x34 (Bool Bool) Bool)
(declare-fun _x35 (Bool Bool) Bool)
(declare-fun _x36 (Bool Bool) Bool)
(declare-fun _x37 (Bool Bool) Bool)
(define-sort _s1 (_y1) _y1)
(declare-sort _u38 0)
(declare-fun _x39 (Bool Bool) Bool)
(define-sort _s2 (_y2 _y3) _y2)
(define-fun _f40 ((_f40_0 Bool) (_f40_1 _u38)) Bool (let ((_let0 (set.singleton true)))(let ((_let1 (set.member _x31 _let0)))(let ((_let2 (xor (_x2 _let1 (_x36 _x32 _f40_0)) _f40_0)))(_x18 (set.choose _let0) (_x19 (_x4 (_x11 (_x20 (set.choose _let0) (_x21 (_x15 _let2 _let2) _let2)) _x31) _let1) (set.choose _let0)))))))
(define-sort _s3 (_y4 _y5) _y4)
(define-fun _f41 ((_f41_0 (Set Bool) ) (_f41_1 Bool)) (Set Bool)  (let ((_let0 (set.singleton true)))(let ((_let1 (set.member (set.choose _let0) _let0)))(let ((_let2 (_x8 _f41_1 _let1)))(let ((_let3 (set.choose _f41_0)))(let ((_let4 (ite (_x23 _let3 _let2) _f41_0 _f41_0)))(let ((_let5 (set.complement (ite (_x7 _let2 _let1) _let4 _f41_0))))(ite (_x25 (set.choose _let4) (_x34 (set.choose (ite (ite _let3 _let2 _let3) _let5 _let5)) _let1)) _let4 _let5))))))))
(define-sort _s4 (_y6 _y6 _y7 _y6 _y8) _y7)
(define-fun _f42 ((_f42_0 _u38) (_f42_1 _u38) (_f42_2 Bool) (_f42_3 _u38) (_f42_4 (Set (Set Bool) ) )) Bool (let ((_let0 (set.singleton true)))(let ((_let1 (_f41 _let0 (set.choose _let0))))(let ((_let2 (set.inter _let1 _let0)))(let ((_let3 (set.inter (set.union _let2 _let0) _let1)))(let ((_let4 _f40))(_x28 (_f40 (_f40 (set.is_singleton (set.choose _f42_4)) _f42_3) _f42_0) (xor (_f40 (set.subset _let3 _let2) _f42_1) (set.is_singleton _let3)))))))))
(define-sort _s5 (_y9 _y10 _y11 _y11) _y9)
(define-fun _f43 ((_f43_0 (Set (Set Bool) ) ) (_f43_1 _u38) (_f43_2 Bool) (_f43_3 Bool)) (Set (Set Bool) )  (let ((_let0 (set.singleton true)))(let ((_let1 _f41))(let ((_let2 (_f41 (set.union (set.inter (_f41 _let0 (set.choose _let0)) _let0) _let0) _f43_2)))(set.insert (_f41 _let2 _f43_3) _let2 (set.inter _f43_0 _f43_0))))))
(define-sort _s6 (_y12 _y12 _y12) _y12)
(define-fun _f44 ((_f44_0 (Set (Set Bool) ) ) (_f44_1 (Set (Set Bool) ) ) (_f44_2 (Set (Set Bool) ) )) (Set (Set Bool) )  (set.union _f44_2 _f44_0))
(define-sort _s7 (_y13 _y14) _y13)
(define-fun _f45 ((_f45_0 (Set (Set Bool) ) ) (_f45_1 Int)) (Set (Set Bool) )  (let ((_let0 _f44))(let ((_let1 (_f44 _f45_0 _f45_0 _f45_0)))(let ((_let2 (_f44 _let1 _let1 _f45_0)))(_f44 _let2 _let2 _let2)))))
(define-sort _s8 (_y15 _y16) _y15)
(define-fun _f46 ((_f46_0 (Set (Set Bool) ) ) (_f46_1 Int)) (Set (Set Bool) )  (let ((_let0 (set.union _f46_0 _f46_0)))(let ((_let1 (set.singleton true)))(let ((_let2 (set.choose _let1)))(let ((_let3 _f41))(let ((_let4 (_f41 _let1 _let2)))(let ((_let5 (set.card (set.union (set.inter _let4 _let1) (set.singleton (and _let2 _let2 (set.choose _let1)))))))(let ((_let6 (* _let5 _let5)))(let ((_let7 (- _let6 _let5)))(let ((_let8 (abs _let7)))(let ((_let9 (abs _let8)))(let ((_let10 (mod _let7 _let8)))(let ((_let11 (ite (set.choose (_f41 (_f41 _let4 (<= _let9 _let10)) (> (+ (* _let7 _let8 _let10 _let9 _let8) _let6 _let8) _let6))) _let0 _let0)))(set.complement (_f44 _let11 _f46_0 _let11)))))))))))))))
(define-sort _s9 (_y17) _y17)
(define-fun _f47 ((_f47_0 Bool)) Bool _f47_0)
(assert (let ((_let0 (set.singleton true)))(let ((_let1 (set.choose _let0)))(let ((_let2 (set.choose _let0)))(let ((_let3 (set.singleton (and _let2 _let2 _let1))))(let ((_let4 (set.choose _let0)))(let ((_let5 (set.member _let4 _let0)))(let ((_let6 _f41))(let ((_let7 (_f41 _let0 _let2)))(let ((_let8 (set.inter _let7 _let0)))(let ((_let9 (set.union _let8 _let3)))(let ((_let10 (set.card _let9)))(let ((_let11 (* _let10 _let10)))(let ((_let12 (- _let11 _let10)))(let ((_let13 (abs _let12)))(let ((_let14 (div _let13 _let11)))(let ((_let15 (* _let14 _let10)))(let ((_let16 (set.inter (set.union _let8 _let0) _let7)))(let ((_let17 (abs _let12)))(let ((_let18 (abs _let17)))(let ((_let19 (mod _let12 _let17)))(let ((_let20 (_f41 _let7 (<= _let18 _let19))))(let ((_let21 (set.choose (_f41 _let20 (> (+ (* _let12 _let17 _let19 _let18 _let17) _let11 _let17) _let11)))))(let ((_let22 (set.inter _let9 _let3)))(let ((_let23 (<= _let11 _let10)))(let ((_let24 (xor _let1 (_x10 _let4 _let4))))(let ((_let25 (xor (_x14 (= _let24 _let24 _let5) _let5) _let23)))(let ((_let26 (set.union (set.insert (xor (set.is_singleton _let3) _let24) (ite _let23 _let24 (_x9 (<= _let18 _let12) (_x26 (> _let19 _let18) _let25))) (set.inter _let16 _let7)) _let22)))(or (set.member (xor (_x29 (set.member (>= (ite (distinct _let21 _let5 _let25) (mod _let15 _let14) _let13) _let10) (_f41 (set.union _let26 (set.union _let22 _let16)) _let5)) (set.is_singleton (set.inter (set.minus _let26 _let20) _let3))) _let21) (set.complement _let16)) ((_ divisible 1342297114) _let15))))))))))))))))))))))))))))))
(assert (let ((_let0 (set.singleton true)))(let ((_let1 (set.choose _let0)))(let ((_let2 (set.choose _let0)))(let ((_let3 (set.member _let2 _let0)))(let ((_let4 (_f41 _let0 _let1)))(let ((_let5 (set.inter _let4 _let0)))(let ((_let6 (set.inter (set.union _let5 _let0) _let4)))(let ((_let7 (set.choose _let0)))(let ((_let8 (set.singleton (and _let1 _let1 _let7))))(let ((_let9 (set.union _let5 _let8)))(let ((_let10 (set.complement (set.union (set.inter _let9 _let8) _let6))))(let ((_let11 (_x10 _let2 _let2)))(let ((_let12 (xor _let7 _let11)))(let ((_let13 (= _let12 _let12 _let3)))(let ((_let14 (set.card _let9)))(let ((_let15 (* _let14 _let14)))(let ((_let16 (- _let15 _let14)))(let ((_let17 (abs _let16)))(let ((_let18 (abs _let17)))(let ((_let19 (<= _let18 _let16)))(let ((_let20 (_x6 (set.choose _let10) (_x9 _let19 (_x26 (> (mod _let16 _let17) _let18) (xor (_x14 _let13 _let3) (<= _let15 _let14)))))))(set.is_singleton (set.insert (=> _let20 _let2 _let11 _let19 _let20) _let13 (not (set.is_singleton _let6)) (set.minus (set.complement _let6) _let10)))))))))))))))))))))))))
(declare-fun _x48 ((Set (Set Bool) )  Int) (Set (Set Bool) ) )
(declare-fun _x49 (Bool _u38) Bool)
(assert (let ((_let0 (set.singleton true)))(let ((_let1 (_f41 _let0 (set.choose _let0))))(not (set.choose (set.complement (set.inter (set.union (set.inter _let1 _let0) _let0) _let1)))))))
(assert true)
(check-sat)
(exit)
