(set-option :global-declarations true)
(set-logic ALL)
(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(declare-sort _u0 0)
(declare-const _x1 _u0)
(declare-const _x2 _u0)
(declare-const _x4 _u0)
(declare-const _x5 Bool)
(declare-const _x6 _u0)
(declare-const _x7 _u0)
(declare-const _x12 _u0)
(declare-const _x14 _u0)
(declare-const _x15 _u0)
(declare-const _x18 _u0)
(declare-const _x20 _u0)
(declare-const _x22 _u0)
(declare-datatype _dt23 ( par ( _p24 _p25 _p26 ) ( (_cons32 (_sel29 (Bag Bool) ) (_sel30 (_dt23 _p24 _p25 _p26)) (_sel31 Bool)) (_cons27) (_cons28)) ))
(declare-datatypes ((_dt33 0) (_dt34 3)) (( (_cons45) (_cons51 (_sel48 (Bag Bool) ) (_sel49 _u0) (_sel50 _u0)) (_cons47 (_sel46 (_dt34 _u0 (Bag Bool)  _u0))) (_cons43 (_sel38 _dt33) (_sel39 (Bag Bool) ) (_sel40 _u0) (_sel41 _dt33) (_sel42 _u0)) (_cons44))( par ( _p35 _p36 _p37 ) ( (_cons63) (_cons62 (_sel59 _dt33) (_sel60 _p35) (_sel61 (Bag Bool) )) (_cons52) (_cons58 (_sel53 (Bag Bool) ) (_sel54 (_dt34 _p35 _p36 _p37)) (_sel55 (Bag Bool) ) (_sel56 _p36) (_sel57 _p37))) )))
(declare-datatypes ((_dt64 2) (_dt67 0)) (( par ( _p65 _p66 ) ( (_cons82 (_sel79 _p66) (_sel80 _u0) (_sel81 Bool)) (_cons88 (_sel83 _p66) (_sel84 Bool) (_sel85 _p66) (_sel86 _dt33) (_sel87 (_dt64 _p65 _p66))) (_cons78 (_sel73 _p66) (_sel74 _p65) (_sel75 _p66) (_sel76 _u0) (_sel77 _p66)) (_cons68) (_cons72 (_sel69 (_dt64 _p65 _p66)) (_sel70 _p66) (_sel71 _p65))) )( (_cons90) (_cons89))))
(declare-const _x91 (_dt34 _u0 (Bag Bool)  _u0))
(assert (let ((_let0 (bag.difference_subtract (as bag.empty(Bag Bool) ) (as bag.empty(Bag Bool) ))))(= _let0 _let0 _let0)))
(assert _x5)
(assert (not (bag.subbag (as bag.empty(Bag Bool) ) (as bag.empty(Bag Bool) ))))
(declare-const _x93 (Bag Bool) )
(declare-const _x94 _dt67)
(assert (let ((_let0 _cons89))(and (= _x94 _let0) ((_ is _cons89) _let0))))
(assert (= _x94 _cons89))
(declare-const _x95 _u0)
(declare-const _x96 Bool)
(declare-const _x98 _dt33)
(check-sat)
(exit)
