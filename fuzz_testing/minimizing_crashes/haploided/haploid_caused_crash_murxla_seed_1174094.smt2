(set-logic QF_ALL)
(set-option :global-declarations true)
(declare-const _x0 Real)
(declare-const _x1 (Set Bool))
(declare-const _x2 Real)
(define-sort _s0 (_y0) _y0)
(define-fun _f3 ((_f3_0 (Set Bool))) (Set Bool) _f3_0)
(declare-const _x4 (Set (Set Bool)))
(define-sort _s1 (_y1 _y2 _y3) _y1)
(define-fun _f5 ((_f5_0 Real) (_f5_1 (Set (Set Bool))) (_f5_2 (Set Real))) Real (let ((_let0 (ite (= (= (set.member (set.subset _x1 _x1) _x1) (< (- _x0 _x2) 722703214727063 _x2 _x2 _x2)) (set.is_singleton _x1)) 722703214727063 _x2))) (let ((_let1 (- _let0))) (let ((_let2 (* _let1 _let1 _let0))) (let ((_let3 (- _let2 _let1 _let2 _let2))) (let ((_let4 (- (- (- _f5_0) (- (/ (- 722703214727063) _let3)))))) (let ((_let5 (- (/ 29 1864717276)))) (let ((_let6 (set.singleton _let2))) (let ((_let7 (set.singleton _let6))) (let ((_let8 (set.complement _let6))) (let ((_let9 (set.insert _let8 _let8 (set.complement _let7)))) (+ (- (* (+ (- (/ (+ (- (* _let4 (set.choose (set.choose (set.inter (set.inter _let9 _let9) _let7))) _let5)) _let1 _let5) _let2)) _let4) (/ 29 1864717276)) _let3 (/ 29 1864717276)) (+ _let3 _x2 _let3)))))))))))))
(define-sort _s2 (_y4 _y5 _y4 _y6) _y4)
(define-fun _f6 ((_f6_0 Bool) (_f6_1 Real) (_f6_2 Bool) (_f6_3 (Set Bool))) Bool (let ((_let0 (ite (= (= (set.member (set.subset _x1 _x1) _x1) (< (- _x0 _x2) 722703214727063 _x2 _x2 _x2)) (set.is_singleton _x1)) 722703214727063 _x2))) (let ((_let1 (- _let0))) (let ((_let2 (* _let1 _let1 _let0))) (let ((_let3 (- _let2 _let1 _let2 _let2))) (let ((_let4 (+ _let3 _x2 _let3))) (let ((_let5 (- _let4))) (let ((_let6 (set.complement _x1))) (let ((_let7 (set.inter _let6 _let6))) (let ((_let8 (set.complement (set.singleton (ite (set.choose _let6) _let7 _let7))))) (>= (ite (>= _let0 _let4) _x2 _let5) (ite (or (set.choose (set.insert (set.subset _let8 _let8) (set.member _let5 (set.complement (set.singleton _let2))) (distinct _let6 _x1) _x1)) _f6_0 (>= _x0 722703214727063 _let5)) _x2 _let5))))))))))))
(declare-const _x7 (Set (Set Real)))
(assert (= (= (set.member (set.subset _x1 _x1) _x1) (and (< (- _x0 _x2) 722703214727063) (and (< 722703214727063 _x2) (< _x2 _x2)))) (set.is_singleton _x1)))
(assert (distinct (set.choose (set.complement _x1)) true))
(assert (let ((_let0 722703214727063)) (let ((_let1 (- _let0))) (let ((_let2 (* _let1 _let1 _let0))) (let ((_let3 (set.singleton _let2))) (let ((_let4 (set.singleton _let3))) (let ((_let5 (set.complement _let3))) (let ((_let6 (set.insert _let5 _let5 (set.complement _let4)))) (let ((_let7 (- _let2 _let1 _let2 _let2))) (let ((_let8 (+ _let7 _x2 _let7))) (and (< (ite (>= _let0 _let8) _x2 (- _let8)) (/ (- 722703214727063) _let7)) (and (< (/ (- 722703214727063) _let7) _x0) (< _x0 (set.choose (set.choose (set.inter (set.inter _let6 _let6) _let4))))))))))))))))
(assert (let ((_let0 722703214727063)) (let ((_let1 (- _let0))) (let ((_let2 (set.singleton (* _let1 _let1 _let0)))) (let ((_let3 (set.singleton _let2))) (let ((_let4 (set.complement _let2))) (let ((_let5 (set.insert _let4 _let4 (set.complement _let3)))) (set.is_singleton (set.choose (set.inter (set.inter _let5 _let5) _let3))))))))))
(assert (let ((_let0 722703214727063)) (let ((_let1 (- _let0))) (set.is_singleton (set.complement (set.singleton (* _let1 _let1 _let0)))))))
(assert (let ((_let0 (set.complement _x1))) (let ((_let1 722703214727063)) (let ((_let2 (- _let1))) (let ((_let3 (* _let2 _let2 _let1))) (let ((_let4 (- _let3 _let2 _let3 _let3))) (let ((_let5 (set.inter _let0 _let0))) (let ((_let6 (set.complement (set.singleton _let5)))) (set.subset (set.insert (set.subset _let6 _let6) (set.member (- (+ _let4 _x2 _let4)) (set.complement (set.singleton _let3))) (distinct _let0 _x1) _x1) (set.choose _x4))))))))))
(assert (let ((_let0 (set.member (set.subset _x1 _x1) _x1))) (let ((_let1 (= (set.is_singleton _x1) (= (and (< _x2 _x2) (and (< 722703214727063 _x2) (< (- _x0 _x2) 722703214727063))) _let0)))) (let ((_let2 (ite _let1 722703214727063 _x2))) (let ((_let3 (- _let2))) (let ((_let4 (* _let3 _let3 _let2))) (let ((_let5 (- _let4 _let3 _let4 _let4))) (let ((_let6 (set.singleton _let4))) (let ((_let7 (set.singleton _let6))) (let ((_let8 (set.complement _let7))) (let ((_let9 (set.complement _let6))) (let ((_let10 (set.insert _let9 _let9 _let8))) (let ((_let11 (set.inter (set.inter _let10 _let10) _let7))) (= (ite (= _let1 (ite (<= (/ 67 9778) (set.choose (set.choose _let11))) (set.is_singleton (set.insert (set.choose _let11) _let9 (set.choose (set.inter _let11 _let8)) _x7)) _let0)) (- 722703214727063) (/ 29 1864717276)) (- (+ _let5 _x2 _let5))))))))))))))))
(assert (let ((_let0 (set.member (set.subset _x1 _x1) _x1))) (let ((_let1 (ite (= (set.is_singleton _x1) (= (and (< _x2 _x2) (and (< 722703214727063 _x2) (< (- _x0 _x2) 722703214727063))) _let0)) 722703214727063 _x2))) (let ((_let2 (- _let1))) (let ((_let3 (set.singleton (* _let2 _let2 _let1)))) (let ((_let4 (set.singleton _let3))) (let ((_let5 (set.complement _let4))) (let ((_let6 (set.complement _let3))) (let ((_let7 (set.insert _let6 _let6 _let5))) (let ((_let8 (set.inter (set.inter _let7 _let7) _let4))) (ite (<= (/ 67 9778) (set.choose (set.choose _let8))) (set.is_singleton (set.insert (set.choose _let8) _let6 (set.choose (set.inter _let8 _let5)) _x7)) _let0)))))))))))
(assert (set.is_singleton _x1))
(assert (set.member (set.subset _x1 _x1) _x1))
(check-sat)
(exit)
