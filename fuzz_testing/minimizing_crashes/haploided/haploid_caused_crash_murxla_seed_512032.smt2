(set-logic ALL)
(set-option :global-declarations true)
(set-option :produce-unsat-assumptions true)
(set-option :produce-unsat-cores true)
(declare-const _x0 String)
(declare-const _x3 String)
(define-sort _s0 (_y0 _y1 _y1) _y1)
(define-fun _f4 ((_f4_0 (Bag String)) (_f4_1 Int) (_f4_2 Int)) Int (let ((_let0 (str.to_int _x0))) (let ((_let1 (set.singleton (= _let0 _let0 _let0)))) (* (set.card (set.minus _let1 (set.inter _let1 _let1))) _f4_1 (bag.count _x3 _f4_0)))))
(assert (let ((_let0 (exists ((_x2 String) (_x1 String)) (ite (ite (set.is_singleton (set.union (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1)))))) (> (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1)))))) (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))))) (set.is_singleton (set.union (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))))) (bag.subbag (bag.inter_min (bag (set.union (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))))) (bag (set.union (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1)))))))) (bag.inter_min (bag (set.union (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))))) (bag (set.union (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))) (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))))))) (= _x3 (str.at (str.replace_all _x2 _x3 "") (mod (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1)))))) (set.card (set.complement (set.inter (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))) (set.insert (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (or (distinct "" _x1) (or (set.is_singleton (set.singleton (distinct "" _x1))) (xor (distinct "" _x1) (set.is_singleton (set.singleton (distinct "" _x1)))))) (set.singleton (distinct "" _x1))))))))))))) (let ((_let1 _let0)) _let1)))
(assert (let ((_let0 (str.to_int _x0))) (let ((_let1 (set.singleton true))) (let ((_let2 (set.inter _let1 _let1))) (set.subset _let2 _let2)))))
(assert (let ((_let0 (str.to_int _x0))) (let ((_let1 (set.singleton true))) (not (set.choose (set.complement (set.minus _let1 (set.inter _let1 _let1))))))))
(check-sat)
(exit)
