(set-logic ALL)
(set-option :global-declarations true)
(declare-const _x0 Int)
(declare-const _x1 (Set (Set Int)))
(declare-const _x3 (Set (Set Int)))
(declare-const _x4 Int)
(declare-const _x5 (Set Int))
(declare-const _x6 (Set Int))
(define-sort _s0 (_y0 _y1 _y2) _y0)
(define-fun _f7 ((_f7_0 (Set (Set Int))) (_f7_1 (Set Int)) (_f7_2 Int)) (Set (Set Int)) _f7_0)
(define-sort _s1 (_y3) _y3)
(define-fun _f8 ((_f8_0 (Set (Set Int)))) (Set (Set Int)) _f8_0)
(define-sort _s2 (_y4 _y5 _y5 _y4 _y5) _y5)
(define-fun _f9 ((_f9_0 (Set (Set Int))) (_f9_1 (Set Int)) (_f9_2 (Set Int)) (_f9_3 (Set (Set Int))) (_f9_4 (Set Int))) (Set Int) (let ((_let0 (set.union (as set.universe (Set Int)) (as set.universe (Set Int))))) (let ((_let1 (set.inter (set.minus _f9_1 _f9_4) _f9_2))) (set.union (set.insert (set.choose _let0) (abs (- (+ _x0 (set.card _x6)))) (set.choose (set.singleton _x4)) (set.inter _let1 _let1)) _let0))))
(define-sort _s3 (_y6) _y6)
(define-fun _f10 ((_f10_0 (Set (Set (Set Int))))) (Set (Set (Set Int))) _f10_0)
(define-sort _s4 (_y7 _y7 _y8) _y7)
(define-fun _f11 ((_f11_0 (Set Int)) (_f11_1 (Set Int)) (_f11_2 Int)) (Set Int) _f11_0)
(assert (let ((_let0 (+ _x0 (set.card _x6)))) (distinct (- _x0) _x4 _let0 (- _let0))))
(assert (let ((_let0 (set.is_singleton (set.singleton (as set.universe (Set Int)))))) (let ((_let1 (set.singleton _x4))) (let ((_let2 (set.member _let1 _x3))) (let ((_let3 (set.card _x6))) (let ((_let4 (+ _x0 _let3))) (let ((_let5 (abs _let4))) (let ((_let6 (+ _let3 _let5 _let5))) (let ((_let7 (distinct _x6 _let1))) (let ((_let8 (distinct 14007031317600376899412121654789881 _let5 _let5))) (let ((_let9 (ite _let8 _let7 (<= _let6 _let6)))) (let ((_let10 (set.inter _x3 _x3))) (let ((_let11 (set.member _let1 (set.inter _let10 _let10)))) (let ((_let12 (= _let9 (xor (and (= _let0 _let11) (= _let9 _let11)) _let9)))) (and _let0 (xor (and (= (ite (ite _let12 _let7 _let9) _let11 _let12) (> (set.choose _let1) _let5)) (and (= (set.is_singleton _x1) ((_ divisible 4062996900) _let4)) (and (= (> (set.choose _let1) _let5) (set.is_singleton _x1)) (= _let2 ((_ divisible 4062996900) _let4))))) _let2))))))))))))))))
(check-sat)
(exit)
