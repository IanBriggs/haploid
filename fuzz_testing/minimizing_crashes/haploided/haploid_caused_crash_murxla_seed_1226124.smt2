(set-logic QF_FP)
(set-option :global-declarations true)
(declare-const _x0 RoundingMode)
(declare-const _x1 Bool)
(declare-const _x2 RoundingMode)
(declare-const _x3 (_ BitVec 5))
(declare-const _x4 (_ BitVec 10))
(declare-const _x5 (_ BitVec 11))
(declare-const _x6 (_ BitVec 16))
(declare-const _x7 (_ BitVec 10))
(define-sort _s0 (_y0 _y1) _y0)
(define-fun _f8 ((_f8_0 Bool) (_f8_1 (_ FloatingPoint 11 53))) Bool _f8_0)
(define-sort _s1 (_y2 _y3 _y3 _y4 _y4) _y3)
(define-fun _f9 ((_f9_0 (_ BitVec 64)) (_f9_1 (_ FloatingPoint 5 11)) (_f9_2 (_ FloatingPoint 5 11)) (_f9_3 (_ FloatingPoint 11 53)) (_f9_4 (_ FloatingPoint 11 53))) (_ FloatingPoint 5 11) _f9_1)
(define-sort _s2 (_y5) _y5)
(define-fun _f10 ((_f10_0 (_ BitVec 16))) (_ BitVec 16) _f10_0)
(define-sort _s3 (_y6 _y7) _y6)
(define-fun _f11 ((_f11_0 (_ BitVec 5)) (_f11_1 (_ BitVec 64))) (_ BitVec 5) (let ((_let0 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let1 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let2 (fp.isNegative _let1))) (let ((_let3 (not _x1))) (let ((_let4 (ite _x1 _let3 _let2))) (let ((_let5 (ite _let4 _let4 _x1))) (let ((_let6 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let5 _let5))) (let ((_let7 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let8 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let9 (fp.isNaN _let1))) (let ((_let10 (ite _let9 _let8 _let7))) (let ((_let11 (ite (ite _let9 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (let ((_let12 (fp.max (fp.mul (ite _let9 (ite (fp.isInfinite _let1) _let11 _let11) _x0) _let10 _let0) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let13 (fp.isNormal _let12))) (let ((_let14 (not (and (and _let6 _let13 _x1) _let3 _let6)))) (let ((_let15 (fp.lt _let12 _let0 _let7))) (let ((_let16 (and _let14 _let15 _let4 _let6 _let15))) (let ((_let17 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let18 (fp.lt (ite _let5 (ite true _let17 _let17) ((_ to_fp 5 11) (ite _let2 _x6 #b1000101011100000))) ((_ to_fp 5 11) #b1000101011100000)))) (ite (ite _let18 true (and _let16 (fp.isSubnormal (fp.abs (ite _let18 (fp.fma _let11 _let7 _let8 _let10) _let1))))) (ite (ite _let16 _let6 (not _let5)) (ite (ite _let13 _let14 (fp.isPositive (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) (ite (fp.isNormal _let0) (_ bv0 5) _x3) _f11_0) _f11_0) _f11_0)))))))))))))))))))))
(define-sort _s4 (_y8 _y8 _y9 _y10 _y11) _y8)
(define-fun _f12 ((_f12_0 RoundingMode) (_f12_1 RoundingMode) (_f12_2 (_ BitVec 16)) (_f12_3 (_ FloatingPoint 5 11)) (_f12_4 Bool)) RoundingMode _f12_0)
(define-sort _s5 (_y12 _y13 _y14 _y14) _y12)
(define-fun _f13 ((_f13_0 Bool) (_f13_1 (_ BitVec 16)) (_f13_2 (_ BitVec 10)) (_f13_3 (_ BitVec 10))) Bool _f13_0)
(define-sort _s6 (_y15 _y16 _y15) _y15)
(define-fun _f14 ((_f14_0 (_ BitVec 10)) (_f14_1 (_ FloatingPoint 5 11)) (_f14_2 (_ BitVec 10))) (_ BitVec 10) (let ((_let0 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let2 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let3 (fp.isNaN _let2))) (let ((_let4 (ite _let3 _let1 _let0))) (let ((_let5 (ite (ite _let3 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (let ((_let6 (fp.fma _let5 _let0 _let1 _let4))) (let ((_let7 (ite (fp.isInfinite _let2) _let5 _let5))) (let ((_let8 (fp.isNegative _let2))) (let ((_let9 (not _x1))) (let ((_let10 (ite _x1 _let9 _let8))) (let ((_let11 (ite _let10 _let10 _x1))) (let ((_let12 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let11 _let11))) (let ((_let13 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let14 (fp.max (fp.mul (ite _let3 _let7 _x0) _let4 _let13) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let15 (fp.lt _let14 _let13 _let0))) (let ((_let16 (ite (and (not (and (and _let12 (fp.isNormal _let14) _x1) _let9 _let12)) _let15 _let10 _let12 _let15) _let12 (not _let11)))) (let ((_let17 (fp.sqrt (ite _let16 _let5 _let7) (fp.neg _let6)))) (let ((_let18 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let19 (ite (fp.lt (ite _let11 (ite true _let18 _let18) ((_ to_fp 5 11) (ite _let8 _x6 #b1000101011100000))) ((_ to_fp 5 11) #b1000101011100000)) _let6 _let2))) (let ((_let20 (fp.abs _let19))) (let ((_let21 (ite _let16 (ite _let12 _let1 _let20) _let19))) (let ((_let22 (fp.lt _let17 _let0))) (let ((_let23 (ite (fp.leq (fp.min _let21 _let13) _let19 (ite _let22 _let21 _let17)) _f14_0 _f14_2))) (ite (fp.isSubnormal _let20) (ite _let22 _let23 _let23) _f14_2))))))))))))))))))))))))))
(define-sort _s7 (_y17) _y17)
(define-fun _f15 ((_f15_0 (_ FloatingPoint 11 53))) (_ FloatingPoint 11 53) (let ((_let0 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))) (let ((_let1 (ite _let0 _x1 (fp.isPositive (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))))) (let ((_let2 (ite _let1 _x5 _x5))) (let ((_let3 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let4 (fp.isNaN _let3))) (let ((_let5 (ite _let4 _let0 (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))))) (let ((_let6 (ite _let5 roundNearestTiesToAway _x0))) (let ((_let7 (fp.isInfinite _let3))) (let ((_let8 (ite _let7 _let6 _let6))) (let ((_let9 (fp.isNegative _let3))) (let ((_let10 (not _x1))) (let ((_let11 (ite _x1 _let10 _let9))) (let ((_let12 (ite _let11 _let11 _x1))) (let ((_let13 (not _let12))) (let ((_let14 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let12 _let12))) (let ((_let15 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let16 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let17 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let18 (ite _let4 _let17 _let15))) (let ((_let19 (fp.mul (ite _let4 _let8 _x0) _let18 _let16))) (let ((_let20 (fp.max _let19 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let21 (fp.lt _let20 _let16 _let15))) (let ((_let22 (fp.isNormal _let20))) (let ((_let23 (not (and (and _let14 _let22 _x1) _let10 _let14)))) (let ((_let24 (and _let23 _let21 _let11 _let14 _let21))) (let ((_let25 (ite _let24 _let14 _let13))) (let ((_let26 (ite _let25 _let6 _let8))) (let ((_let27 (ite _let13 _let26 _let6))) (let ((_let28 ((_ to_fp 5 11) (ite _let9 _x6 #b1000101011100000)))) (let ((_let29 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let30 (ite true _let29 _let29))) (let ((_let31 (ite _let12 _let30 _let28))) (let ((_let32 (fp.lt _let31 ((_ to_fp 5 11) #b1000101011100000)))) (let ((_let33 (ite _let32 _let27 _let27))) (let ((_let34 ((_ to_fp 11 53) _let33 _let2))) (let ((_let35 ((_ to_fp 11 53) _let26 (fp.neg ((_ to_fp 5 11) _let33 _let2))))) (let ((_let36 (fp.fma _let6 _let15 _let17 _let18))) (let ((_let37 (ite _let32 _let36 _let3))) (let ((_let38 (fp.abs _let37))) (let ((_let39 (ite _let14 _let17 _let38))) (let ((_let40 (ite _let25 _let39 _let37))) (let ((_let41 (fp.min _let40 _let16))) (let ((_let42 (ite _let5 (ite (fp.lt _let41 _let41 _let40) (fp.div roundNearestTiesToAway (fp.sqrt _x0 _let37) _let34) _let35) _let34))) (let ((_let43 (fp.neg _let36))) (let ((_let44 (fp.geq _let34 _let35))) (let ((_let45 ((_ to_fp 5 11) #b1000101011100000))) (let ((_let46 (fp.min _let45 ((_ to_fp 5 11) _let8 _x7)))) (let ((_let47 (fp.isSubnormal _let38))) (let ((_let48 (and _let24 _let47))) (let ((_let49 (fp.sqrt _let26 _let43))) (let ((_let50 (ite _let22 (ite _let32 true _let48) _let48))) (fp.min (ite (not _let50) (ite _x1 (ite (ite _let12 (fp.isNormal _let16) _let50) (ite (fp.isNaN (ite (fp.lt _let49 _let15) _let40 _let49)) (ite _let9 (ite (xor _let44 (fp.isNormal (fp.neg (ite _let23 (ite _let47 (ite _let48 (fp.add _let6 (fp.mul roundNearestTiesToAway _let30 _let31) _let46) _let28) _let45) _let46)))) (ite (ite _let7 _let1 _let44) _let42 _let38) _let43) _let19) _let41) _let39) _let15) _let42) _f15_0)))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))
(assert (let ((_let0 ((_ to_fp 5 11) #b1000101011100000))) (let ((_let1 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))) (let ((_let2 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let3 (fp.isNaN _let2))) (let ((_let4 (ite (ite _let3 _let1 (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (let ((_let5 _let4)) (let ((_let6 (fp.isNegative _let2))) (let ((_let7 true)) (let ((_let8 (ite _x1 _let7 _let6))) (let ((_let9 (ite _let8 _let8 _x1))) (let ((_let10 (not _let9))) (let ((_let11 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let9))) (let ((_let12 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let13 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let14 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let15 (ite _let3 _let14 _let12))) (let ((_let16 (fp.max (fp.mul (ite _let3 _let5 _x0) _let15 _let13) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let17 (fp.lt _let16 _let13 _let12))) (let ((_let18 true)) (let ((_let19 (and _let18 (and _let8 _let17 (and _let11 _let17))))) (let ((_let20 (ite (ite _let19 _let11 _let10) _let4 _let5))) (let ((_let21 (ite _let10 _let20 _let4))) (let ((_let22 ((_ to_fp 5 11) (ite _let6 _x6 #b1000101011100000)))) (let ((_let23 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let24 _let23)) (let ((_let25 (ite _let9 _let24 _let22))) (let ((_let26 (fp.lt _let25 _let0))) (let ((_let27 ((_ to_fp 5 11) #b1000101011100000))) (let ((_let28 (fp.min _let27 ((_ to_fp 5 11) _let5 _x7)))) (let ((_let29 (fp.isSubnormal (fp.abs (ite _let26 (fp.fma _let4 _let12 _let14 _let15) _let2))))) (let ((_let30 (ite _let29 (ite (and _let19 _let29) (fp.add _let4 (fp.mul roundNearestTiesToAway _let24 _let25) _let28) _let22) _let27))) (fp.isInfinite (fp.rem (fp.mul _let20 _let30 (fp.sub _x2 (fp.neg (ite _let18 _let30 _let28)) (fp.neg ((_ to_fp 5 11) _let21 _x5)))) _let0))))))))))))))))))))))))))))))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.isNaN _let0))) (let ((_let2 (ite (ite _let1 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (fp.isInfinite (fp.max (fp.mul (ite _let1 _let2 _x0) (ite _let1 ((_ to_fp 11 53) roundNearestTiesToAway _x5) (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53))) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.isNaN _let0))) (let ((_let2 (ite (ite _let1 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (fp.isNormal (fp.max (fp.mul (ite _let1 _let2 _x0) (ite _let1 ((_ to_fp 11 53) roundNearestTiesToAway _x5) (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53))) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.isNegative _let0))) (let ((_let2 true)) (let ((_let3 (ite _x1 _let2 _let1))) (let ((_let4 (ite _let3 _let3 _x1))) (let ((_let5 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let4))) (let ((_let6 (fp.isNaN _let0))) (let ((_let7 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))) (let ((_let8 (ite (ite _let6 _let7 (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (ite (xor _let1 _let6) (ite _let7 _x1 (fp.isPositive (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) true)))))))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let2 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let3 (fp.isNaN _let0))) (let ((_let4 (fp.isNegative _let0))) (let ((_let5 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let6 (ite _x1 true _let4))) (fp.isInfinite (fp.abs (ite (fp.lt (ite (ite _let6 _let6 _x1) _let5 ((_ to_fp 5 11) (ite _let4 _x6 #b1000101011100000))) ((_ to_fp 5 11) #b1000101011100000)) (fp.fma (ite (ite _let3 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0) _let1 _let2 (ite _let3 _let2 _let1)) _let0)))))))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let2 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let3 (fp.isNaN _let0))) (let ((_let4 (ite _let3 _let2 _let1))) (let ((_let5 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))) (let ((_let6 (ite (ite _let3 _let5 (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (let ((_let7 (fp.isNegative _let0))) (let ((_let8 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let9 true)) (let ((_let10 (ite _x1 _let9 _let7))) (let ((_let11 (ite _let10 _let10 _x1))) (let ((_let12 (fp.lt (ite _let11 _let8 ((_ to_fp 5 11) (ite _let7 _x6 #b1000101011100000))) ((_ to_fp 5 11) #b1000101011100000)))) (let ((_let13 (fp.isSubnormal (fp.abs (ite _let12 (fp.fma _let6 _let1 _let2 _let4) _let0))))) (let ((_let14 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let15 (fp.max (fp.mul (ite _let3 _let6 _x0) _let4 _let14) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let16 (fp.lt _let15 _let14 _let1))) (let ((_let17 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let11))) (let ((_let18 (fp.isNormal _let15))) (let ((_let19 true)) (let ((_let20 (and _let16 (and _let19 (and _let17 (and _let10 (and _let13 _let16))))))) (ite (ite (xor _let7 _let3) (ite _let5 _x1 (fp.isPositive (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) _let19) _let13 (ite _let11 (fp.isNormal _let14) (ite _let18 (ite _let12 true _let20) _let20)))))))))))))))))))))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let2 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let3 (fp.isNaN _let0))) (let ((_let4 (ite _let3 _let2 _let1))) (let ((_let5 (ite (ite _let3 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (let ((_let6 (fp.isNegative _let0))) (let ((_let7 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let8 true)) (let ((_let9 (ite _x1 _let8 _let6))) (let ((_let10 (ite _let9 _let9 _x1))) (let ((_let11 (ite (fp.lt (ite _let10 _let7 ((_ to_fp 5 11) (ite _let6 _x6 #b1000101011100000))) ((_ to_fp 5 11) #b1000101011100000)) (fp.fma _let5 _let1 _let2 _let4) _let0))) (let ((_let12 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let10))) (let ((_let13 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let14 (fp.max (fp.mul (ite _let3 _let5 _x0) _let4 _let13) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let15 (fp.lt _let14 _let13 _let1))) (fp.isNormal (ite (ite (and _let9 (and _let12 _let15)) _let12 (not _let10)) (ite _let12 _let2 (fp.abs _let11)) _let11)))))))))))))))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (ite _x1 true (fp.isNegative _let0)))) (let ((_let2 (fp.isNaN _let0))) (let ((_let3 (ite (ite _let2 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (ite (not (ite _let1 _let1 _x1)) (fp.isInfinite (fp.max (fp.mul (ite _let2 _let3 _x0) (ite _let2 ((_ to_fp 11 53) roundNearestTiesToAway _x5) (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53))) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) _let1))))))
(assert (let ((_let0 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 true)) (let ((_let2 (ite _x1 _let1 (fp.isNegative _let0)))) (let ((_let3 (ite _let2 _let2 _x1))) (let ((_let4 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let3))) (let ((_let5 (fp.isNaN _let0))) (let ((_let6 (ite (ite _let5 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) true))))))))
(assert (let ((_let0 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))) (let ((_let1 (ite _let0 _x1 (fp.isPositive (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))))) (let ((_let2 _x5)) (let ((_let3 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let4 (fp.isNaN _let3))) (let ((_let5 (ite _let4 _let0 (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))))) (let ((_let6 (ite _let5 roundNearestTiesToAway _x0))) (let ((_let7 (fp.isInfinite _let3))) (let ((_let8 _let6)) (let ((_let9 (fp.isNegative _let3))) (let ((_let10 true)) (let ((_let11 (ite _x1 _let10 _let9))) (let ((_let12 (ite _let11 _let11 _x1))) (let ((_let13 (not _let12))) (let ((_let14 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let12))) (let ((_let15 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let16 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let17 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let18 (ite _let4 _let17 _let15))) (let ((_let19 (fp.mul (ite _let4 _let8 _x0) _let18 _let16))) (let ((_let20 (fp.max _let19 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let21 (fp.lt _let20 _let16 _let15))) (let ((_let22 (fp.isNormal _let20))) (let ((_let23 true)) (let ((_let24 (and _let11 (and _let21 (and _let14 (and _let21 _let23)))))) (let ((_let25 (ite _let24 _let14 _let13))) (let ((_let26 (ite _let25 _let6 _let8))) (let ((_let27 (ite _let13 _let26 _let6))) (let ((_let28 ((_ to_fp 5 11) (ite _let9 _x6 #b1000101011100000)))) (let ((_let29 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let30 _let29)) (let ((_let31 (ite _let12 _let30 _let28))) (let ((_let32 (fp.lt _let31 ((_ to_fp 5 11) #b1000101011100000)))) (let ((_let33 _let27)) (let ((_let34 ((_ to_fp 11 53) _let33 _let2))) (let ((_let35 ((_ to_fp 11 53) _let26 (fp.neg ((_ to_fp 5 11) _let33 _let2))))) (let ((_let36 (fp.fma _let6 _let15 _let17 _let18))) (let ((_let37 (ite _let32 _let36 _let3))) (let ((_let38 (fp.abs _let37))) (let ((_let39 (ite _let14 _let17 _let38))) (let ((_let40 (ite _let25 _let39 _let37))) (let ((_let41 (fp.min _let40 _let16))) (let ((_let42 (ite _let5 (ite (fp.lt _let41 _let41 _let40) (fp.div roundNearestTiesToAway (fp.sqrt _x0 _let37) _let34) _let35) _let34))) (let ((_let43 (fp.neg _let36))) (let ((_let44 (fp.geq _let34 _let35))) (let ((_let45 ((_ to_fp 5 11) #b1000101011100000))) (let ((_let46 (fp.min _let45 ((_ to_fp 5 11) _let8 _x7)))) (let ((_let47 (fp.isSubnormal _let38))) (let ((_let48 (and _let24 _let47))) (let ((_let49 (fp.sqrt _let26 _let43))) (fp.leq (ite _x1 (ite (ite _let12 (fp.isNormal _let16) (ite _let22 (ite _let32 true _let48) _let48)) (ite (fp.isNaN (ite (fp.lt _let49 _let15) _let40 _let49)) (ite _let9 (ite (xor _let44 (fp.isNormal (fp.neg (ite _let23 (ite _let47 (ite _let48 (fp.add _let6 (fp.mul roundNearestTiesToAway _let30 _let31) _let46) _let28) _let45) _let46)))) (ite (ite _let7 _let1 _let44) _let42 _let38) _let43) _let19) _let41) _let39) _let15) _let34 _let42))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (let ((_let0 (fp.isNegative (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))))) (let ((_let1 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let2 (ite _x1 true _let0))) (fp.lt (ite (ite _let2 _let2 _x1) _let1 ((_ to_fp 5 11) (ite _let0 _x6 #b1000101011100000))) ((_ to_fp 5 11) #b1000101011100000))))))
(assert (let ((_let0 (fp.isPositive (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)))) (let ((_let2 (ite _let1 _x1 _let0))) (let ((_let3 _x5)) (let ((_let4 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let5 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let6 ((_ to_fp 11 53) roundNearestTiesToAway _x5))) (let ((_let7 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let8 (fp.isNaN _let7))) (let ((_let9 (ite _let8 _let6 _let4))) (let ((_let10 (ite (ite _let8 _let1 (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (let ((_let11 _let10)) (let ((_let12 (ite _let8 _let11 _x0))) (let ((_let13 (fp.max (fp.mul _let12 _let9 _let5) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let14 (fp.lt _let13 _let5 _let4))) (let ((_let15 (fp.isNegative _let7))) (let ((_let16 true)) (let ((_let17 (ite _x1 _let16 _let15))) (let ((_let18 (ite _let17 _let17 _x1))) (let ((_let19 (= (distinct (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) _let18))) (let ((_let20 (fp.isNormal _let13))) (let ((_let21 (and _x1 (and _let19 _let20)))) (let ((_let22 (=> _let16 _let19 (not _let21)))) (let ((_let23 (and _let19 (and _let14 (and _let14 (and _let17 _let22)))))) (let ((_let24 _let3)) (let ((_let25 ((_ to_fp 5 11) #b1000101011100000))) (let ((_let26 (fp.min _let25 ((_ to_fp 5 11) _let11 _x7)))) (let ((_let27 ((_ to_fp 5 11) (ite _let15 _x6 #b1000101011100000)))) (let ((_let28 ((_ to_fp 5 11) roundNearestTiesToAway (_ bv22 5)))) (let ((_let29 _let28)) (let ((_let30 (ite _let18 _let29 _let27))) (let ((_let31 (fp.fma _let10 _let4 _let6 _let9))) (let ((_let32 ((_ to_fp 5 11) #b1000101011100000))) (let ((_let33 (fp.lt _let30 _let32))) (let ((_let34 (ite _let33 _let31 _let7))) (let ((_let35 (fp.abs _let34))) (let ((_let36 (fp.isSubnormal _let35))) (let ((_let37 (ite _let22 (ite _let36 (ite (and _let23 _let36) (fp.add _let10 (fp.mul roundNearestTiesToAway _let29 _let30) _let26) _let27) _let25) _let26))) (let ((_let38 (fp.isNegative (ite _let15 (ite (ite _let20 _let22 _let0) _let37 (fp.abs _let27)) _let37)))) (let ((_let39 _let24)) (let ((_let40 (ite _x1 _let12 _x0))) (let ((_let41 (ite _let23 _let19 (not _let18)))) (let ((_let42 (ite _let41 (ite _let19 _let6 _let35) _let34))) (let ((_let43 (fp.min _let42 _let5))) (let ((_let44 (fp.sqrt (ite _let41 _let10 _let11) (fp.neg _let31)))) (let ((_let45 (ite (and (fp.isNaN (ite (fp.lt _let44 _let4) _let42 _let44)) (and _let33 (and (fp.lt _let43 _let43 _let42) (and _let1 _let21)))) (ite (=> (fp.isPositive _let32) (fp.isNegative _let42)) _let40 _let12) _let40))) (fp.isSubnormal ((_ to_fp 5 11) _let45 (ite (fp.isInfinite _let13) (ite _let2 (ite _let38 _let39 _let24) _let39) _let39))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (let ((_let0 (fp.mul _x0 (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let1 (fp.mul _x0 (_ -zero 11 53) (_ -zero 11 53)))) (let ((_let2 (fp.fma roundNearestTiesToAway (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)))) (let ((_let3 (fp.isNaN _let2))) (let ((_let4 (ite (ite _let3 (fp.gt (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110) (_ -zero 11 53)) (fp.leq (_ -zero 11 53) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110))) roundNearestTiesToAway _x0))) (fp.lt (fp.max (fp.mul (ite _let3 _let4 _x0) (ite _let3 ((_ to_fp 11 53) roundNearestTiesToAway _x5) _let0) _let1) (fp #b0 #b01001100101 #b0100100100010001110110101100010011100010011010000110)) _let1 _let0)))))))
(assert (not _x1))
(check-sat)
(exit)
