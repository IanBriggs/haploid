(set-logic QF_ALL)
(set-option :global-declarations true)
(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(declare-const _x0 Real)
(declare-const _x1 Real)
(declare-const _x2 Real)
(declare-const _x3 Real)
(declare-const _x4 Real)
(declare-const _x5 Real)
(define-sort _s0 (_y0 _y0 _y1) _y0)
(define-fun _f6 ((_f6_0 Real) (_f6_1 Real) (_f6_2 (Set Real))) Real _f6_0)
(define-sort _s1 (_y2 _y3 _y2) _y3)
(define-fun _f7 ((_f7_0 (Set Real)) (_f7_1 (Set (Set Bool))) (_f7_2 (Set Real))) (Set (Set Bool)) (let ((_let0 (set.singleton (set.member (/ 684250174 5631) (set.singleton (/ 676760653 5068240882)))))) (set.inter _f7_1 (set.singleton (set.minus (set.complement _let0) _let0)))))
(define-sort _s2 (_y4 _y5 _y6 _y7 _y4) _y7)
(define-fun _f8 ((_f8_0 Bool) (_f8_1 (Set Real)) (_f8_2 (Set (Set Bool))) (_f8_3 (Set Bool)) (_f8_4 Bool)) (Set Bool) (let ((_let0 (set.singleton (/ 676760653 5068240882)))) (set.union _f8_3 (set.singleton (not (= (set.subset _let0 _let0) (> _x1 6371548911455839004210920636472475107366329192 55351583.962601334807037759818025181765 _x5)))))))
(define-sort _s3 (_y8 _y9) _y8)
(define-fun _f9 ((_f9_0 Bool) (_f9_1 (Set Real))) Bool (let ((_let0 (set.singleton (/ 676760653 5068240882)))) (let ((_let1 (set.union _let0 _let0))) (let ((_let2 (ite (= (= _let0 _let0) (distinct _x4 _x2 _x1) (xor (not (= (set.subset _let0 _let0) (> _x1 6371548911455839004210920636472475107366329192 55351583.962601334807037759818025181765 _x5))) (>= (/ 684250174 5631) 817827033174096615294886328579953094735544726 _x0 _x3))) _let1 _let0))) (let ((_let3 (set.choose (set.inter _let1 _let2)))) (let ((_let4 (* _let3 (/ 676760653 5068240882)))) (let ((_let5 (set.choose _let2))) (let ((_let6 (- _let5))) (let ((_let7 (set.choose _let1))) (let ((_let8 (/ (* _let4 _let4) _x2 _x0))) (let ((_let9 (- _x1))) (let ((_let10 (+ _let5 (set.choose _let2)))) (ite (>= _let7 (ite (< _let9 _let5 _x4) _let8 _let6)) (<= (/ _let10 _let10) _let4) (xor (=> (> _let9 _let9 _let8 _let7) (= _let6 _let3) (>= _let4 _x3 _let4)) _f9_0))))))))))))))
(define-sort _s4 (_y10 _y11 _y12) _y10)
(define-fun _f10 ((_f10_0 (Set (Set Bool))) (_f10_1 Bool) (_f10_2 (Set Bool))) (Set (Set Bool)) (set.inter _f10_0 (set.singleton (set.choose (set.singleton (set.complement (set.singleton (set.member (/ 684250174 5631) (set.singleton (/ 676760653 5068240882))))))))))
(define-sort _s5 (_y13 _y13 _y14 _y14) _y14)
(define-fun _f11 ((_f11_0 Real) (_f11_1 Real) (_f11_2 (Set (Set Bool))) (_f11_3 (Set (Set Bool)))) (Set (Set Bool)) _f11_2)
(define-sort _s6 (_y15 _y15 _y16 _y17) _y15)
(define-fun _f12 ((_f12_0 (Set Bool)) (_f12_1 (Set Bool)) (_f12_2 (Set (Set Bool))) (_f12_3 Real)) (Set Bool) _f12_0)
(assert (= _x4 6371548911455839004210920636472475107366329192))
(assert (let ((_let0 (set.singleton (/ 676760653 5068240882)))) (let ((_let1 (ite (and (distinct 6371548911455839004210920636472475107366329192 _x2 _x1) (= (distinct 6371548911455839004210920636472475107366329192 _x2 _x1) (xor (not (= (set.subset _let0 _let0) (and (> _x1 6371548911455839004210920636472475107366329192) (and (> 6371548911455839004210920636472475107366329192 55351583.962601334807037759818025181765) (> 55351583.962601334807037759818025181765 _x5))))) (and (>= (/ 684250174 5631) 817827033174096615294886328579953094735544726) (and (>= 817827033174096615294886328579953094735544726 _x0) (>= _x0 _x3)))))) (set.union _let0 _let0) _let0))) (let ((_let2 (+ (set.choose _let1) (set.choose _let1)))) (let ((_let3 (/ _let2 _let2))) (<= _let3 _let3))))))
(assert (let ((_let0 (set.singleton (/ 676760653 5068240882)))) (let ((_let1 (set.union _let0 _let0))) (let ((_let2 (ite (and (distinct 6371548911455839004210920636472475107366329192 _x2 _x1) (= (distinct 6371548911455839004210920636472475107366329192 _x2 _x1) (xor (not (= (set.subset _let0 _let0) (and (> _x1 6371548911455839004210920636472475107366329192) (and (> 6371548911455839004210920636472475107366329192 55351583.962601334807037759818025181765) (> 55351583.962601334807037759818025181765 _x5))))) (and (>= (/ 684250174 5631) 817827033174096615294886328579953094735544726) (and (>= 817827033174096615294886328579953094735544726 _x0) (>= _x0 _x3)))))) _let1 _let0))) (let ((_let3 (set.inter _let1 _let2))) (let ((_let4 (* (set.choose _let3) (/ 676760653 5068240882)))) (let ((_let5 (set.insert _let4 _x5 _x2 (- (set.choose _let2)) _let3))) (let ((_let6 (* _let4 _let4))) (set.subset (set.union (set.minus (set.insert (set.choose _let1) 55351583.962601334807037759818025181765 _x0 _x5 (set.insert (/ _let6 _x2 _x0) 6371548911455839004210920636472475107366329192 _let6 (/ 684250174 5631) _let0)) (set.minus _let5 _let5)) _let5) _let2)))))))))
(assert (xor (and (< _x3 _x2) (< _x2 _x5)) (< 817827033174096615294886328579953094735544726 _x5)))
(check-sat)
(exit)
