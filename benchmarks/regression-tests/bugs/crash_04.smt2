(set-option :global-declarations true)
(set-logic QF_ALL)
(set-option :produce-unsat-assumptions true)
(declare-const _x0 Bool)
(declare-const _x1 String)
(declare-const _x2 String)
(declare-const _x3 String)
(declare-const _x4 RoundingMode)
(declare-const _x5 String)
(declare-const _x6 RoundingMode)
(declare-const _x7 RoundingMode)
(declare-const _x8 String)
(declare-const _x9 RoundingMode)
(declare-const _x10 RoundingMode)
(declare-const _x11 RoundingMode)
(define-sort _s0 (_y0 _y1 _y2 _y0) _y0)
(define-fun _f12 ((_f12_0 Bool) (_f12_1 RoundingMode) (_f12_2 String) (_f12_3 Bool)) Bool _f12_0)
(define-sort _s1 (_y3 _y4 _y5 _y6 _y7) _y5)
(define-fun _f13 ((_f13_0 RoundingMode) (_f13_1 (Set String) ) (_f13_2 Bool) (_f13_3 Real) (_f13_4 String)) Bool (<= _f13_3 _f13_3))
(declare-const _x14 Real)
(declare-const _x15 (Set String) )
(declare-fun _x16 (Bool RoundingMode String Bool) Bool)
(declare-const _x17 RoundingMode)
(declare-const _x18 RoundingMode)
(declare-fun _x19 (RoundingMode (Set String)  Bool Real String) Bool)
(declare-const _x20 Real)
(declare-const _x21 RoundingMode)
(define-sort _s2 (_y8 _y9 _y8) _y8)
(define-fun _f22 ((_f22_0 (Bag Real) ) (_f22_1 Real) (_f22_2 (Bag Real) )) (Bag Real)  (let ((_let0 (set.singleton _x2)))(bag.difference_subtract _f22_0 (bag (cos real.pi) (str.to_int (set.choose (set.minus _let0 _let0)))))))
(declare-const _x23 Int)
(declare-const _x24 Bool)
(declare-const _x25 String)
(define-sort _s3 (_y10 _y10 _y10 _y11) _y10)
(define-fun _f26 ((_f26_0 (Set Real) ) (_f26_1 (Set Real) ) (_f26_2 (Set Real) ) (_f26_3 RoundingMode)) (Set Real)  _f26_0)
(define-sort _s4 (_y12) _y12)
(define-fun _f27 ((_f27_0 (Bag Bool) )) (Bag Bool)  (bag.duplicate_removal (bag.union_max (bag _x24 _x23) _f27_0)))
(check-sat)
(assert (let ((_let0 (- _x20)))(let ((_let1 (set.singleton _x2)))(let ((_let2 (set.minus _let1 _let1)))(let ((_let3 (set.complement _let2)))(let ((_let4 (set.union (ite (>= _x14 _x20 (arccos _let0) _let0 _x14) _let2 _let3) _x15)))(let ((_let5 (set.inter _let1 _let4)))(let ((_let6 (set.choose _let1)))(_x16 (is_int (/ 772 255245196)) _x11 (set.choose (set.minus (set.insert (str.replace _x5 _x2 "") _x8 (str.replace (set.choose _let3) _let6 (set.choose _x15)) "" (set.complement (set.insert _let6 _x25 _let4))) _let5)) (_x19 _x7 _let5 (is_int (arcsin (* _x20 _let0 _x14))) (- (/ 772 255245196)) _x3))))))))))
(exit)

;; EXPECTED: (set-logic QF_ALL)
;; EXPECTED: (set-option :global-declarations true)
;; EXPECTED: (set-option :produce-unsat-assumptions true)
;; EXPECTED: (declare-const _x0 Bool)
;; EXPECTED: (declare-const _x1 String)
;; EXPECTED: (declare-const _x2 String)
;; EXPECTED: (declare-const _x3 String)
;; EXPECTED: (declare-const _x4 RoundingMode)
;; EXPECTED: (declare-const _x5 String)
;; EXPECTED: (declare-const _x6 RoundingMode)
;; EXPECTED: (declare-const _x7 RoundingMode)
;; EXPECTED: (declare-const _x8 String)
;; EXPECTED: (declare-const _x9 RoundingMode)
;; EXPECTED: (declare-const _x10 RoundingMode)
;; EXPECTED: (declare-const _x11 RoundingMode)
;; EXPECTED: (define-sort _s0 (_y0 _y1 _y2 _y0) _y0)
;; EXPECTED: (define-fun _f12 ((_f12_0 Bool) (_f12_1 RoundingMode) (_f12_2 String) (_f12_3 Bool)) Bool _f12_0)
;; EXPECTED: (define-sort _s1 (_y3 _y4 _y5 _y6 _y7) _y5)
;; EXPECTED: (define-fun _f13 ((_f13_0 RoundingMode) (_f13_1 (Set String)) (_f13_2 Bool) (_f13_3 Real) (_f13_4 String)) Bool (<= _f13_3 _f13_3))
;; EXPECTED: (declare-const _x14 Real)
;; EXPECTED: (declare-const _x15 (Set String))
;; EXPECTED: (declare-fun _x16 (Bool RoundingMode String Bool) Bool)
;; EXPECTED: (declare-const _x17 RoundingMode)
;; EXPECTED: (declare-const _x18 RoundingMode)
;; EXPECTED: (declare-fun _x19 (RoundingMode (Set String) Bool Real String) Bool)
;; EXPECTED: (declare-const _x20 Real)
;; EXPECTED: (declare-const _x21 RoundingMode)
;; EXPECTED: (define-sort _s2 (_y8 _y9 _y8) _y8)
;; EXPECTED: (define-fun _f22 ((_f22_0 (Bag Real)) (_f22_1 Real) (_f22_2 (Bag Real))) (Bag Real) (let ((_let0 (set.singleton _x2))) (bag.difference_subtract _f22_0 (bag (cos real.pi) (str.to_int (set.choose (set.minus _let0 _let0)))))))
;; EXPECTED: (declare-const _x23 Int)
;; EXPECTED: (declare-const _x24 Bool)
;; EXPECTED: (declare-const _x25 String)
;; EXPECTED: (define-sort _s3 (_y10 _y10 _y10 _y11) _y10)
;; EXPECTED: (define-fun _f26 ((_f26_0 (Set Real)) (_f26_1 (Set Real)) (_f26_2 (Set Real)) (_f26_3 RoundingMode)) (Set Real) _f26_0)
;; EXPECTED: (define-sort _s4 (_y12) _y12)
;; EXPECTED: (define-fun _f27 ((_f27_0 (Bag Bool))) (Bag Bool) (bag.duplicate_removal (bag.union_max (bag _x24 _x23) _f27_0)))
;; EXPECTED: (assert (let ((_let0 (- _x20))) (let ((_let1 (set.singleton _x2))) (let ((_let2 (set.minus _let1 _let1))) (let ((_let3 (set.complement _let2))) (let ((_let4 (set.union (ite (and (>= _x14 _x20) (>= _x20 (arccos _let0)) (>= (arccos _let0) _let0) (>= _let0 _x14)) _let2 _let3) _x15))) (let ((_let5 (set.inter _let1 _let4))) (let ((_let6 (set.choose _let1))) (_x16 (is_int (/ 772 255245196)) _x11 (set.choose (set.minus (set.insert (str.replace _x5 _x2 "") _x8 (str.replace (set.choose _let3) _let6 (set.choose _x15)) "" (set.complement (set.insert _let6 _x25 _let4))) _let5)) (_x19 _x7 _let5 (is_int (arcsin (* _x20 _let0 _x14))) (- (/ 772 255245196)) _x3))))))))))
;; EXPECTED: (check-sat)
;; EXPECTED: (exit)