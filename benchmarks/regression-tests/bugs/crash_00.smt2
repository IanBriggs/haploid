(set-option :global-declarations true)
(set-logic QF_ALL)
(set-option :produce-unsat-assumptions true)
(set-option :produce-unsat-cores true)
(declare-const _x0 Bool)
(declare-const _x1 Bool)
(declare-const _x2 Bool)
(declare-const _x3 Bool)
(declare-const _x4 Bool)
(declare-const _x5 Bool)
(define-sort _s0 (_y0) _y0)
(define-fun _f6 ((_f6_0 Bool)) Bool (let ((_let0 (= _x0 _x3)))(let ((_let1 (distinct _x5 (ite _x4 _let0 _x2))))(let ((_let2 (distinct false _x1)))(let ((_let3 (and _let2 _let1 _f6_0)))(let ((_let4 (and (xor (not false) (not _let3)) _let3)))(let ((_let5 (=> _let4 _let4 _let1)))(let ((_let6 (= _let5 _let2 _let4)))(let ((_let7 (and _let6 _x1 _let6)))(let ((_let8 (not _let7)))(let ((_let9 (not _let8)))(let ((_let10 (= (xor _let9 _let3) _let6 false)))(let ((_let11 (xor _let10 _let10)))(let ((_let12 (ite (not _let11) _x1 _let11)))(let ((_let13 (or (and (distinct _let12 _let9) _x0 _let12 _f6_0) _x5 _x2 _let2)))(let ((_let14 (= (ite (or _let13 _let5 _let8) _let12 _x5) _let0 _let4 _let7)))(= (xor (ite _let14 _let13 _let12) _let14) _let6)))))))))))))))))
(assert (let ((_let0 (= _x0 _x3)))(let ((_let1 (distinct false _x1)))(let ((_let2 (= _let1 _x0)))(=> (and (= (=> _let2 _x1) _let2 false (ite _x4 _let0 _x2)) _let1) _let0 _x3)))))
(check-sat)
(check-sat)
(exit)

;; EXPECTED: (set-logic QF_ALL)
;; EXPECTED: (set-option :global-declarations true)
;; EXPECTED: (set-option :produce-unsat-assumptions true)
;; EXPECTED: (set-option :produce-unsat-cores true)
;; EXPECTED: (declare-const _x0 Bool)
;; EXPECTED: (declare-const _x1 Bool)
;; EXPECTED: (declare-const _x2 Bool)
;; EXPECTED: (declare-const _x3 Bool)
;; EXPECTED: (declare-const _x4 Bool)
;; EXPECTED: (declare-const _x5 Bool)
;; EXPECTED: (define-sort _s0 (_y0) _y0)
;; EXPECTED: (define-fun _f6 ((_f6_0 Bool)) Bool (let ((_let0 (= _x0 _x3))) (let ((_let1 (distinct _x5 (ite _x4 _let0 _x2)))) (let ((_let2 (distinct false _x1))) (let ((_let3 (and _let2 _let1 _f6_0))) (let ((_let4 (and (xor (not false) (not _let3)) _let3))) (let ((_let5 (=> _let4 _let4 _let1))) (let ((_let6 (= _let5 _let2 _let4))) (let ((_let7 (and _let6 _x1 _let6))) (let ((_let8 (not _let7))) (let ((_let9 (not _let8))) (let ((_let10 (= (xor _let9 _let3) _let6 false))) (let ((_let11 (xor _let10 _let10))) (let ((_let12 (ite (not _let11) _x1 _let11))) (let ((_let13 (or (and (distinct _let12 _let9) _x0 _let12 _f6_0) _x5 _x2 _let2))) (let ((_let14 (= (ite (or _let13 _let5 _let8) _let12 _x5) _let0 _let4 _let7))) (= (xor (ite _let14 _let13 _let12) _let14) _let6)))))))))))))))))
;; EXPECTED: (assert (let ((_let0 (= _x0 _x3))) (let ((_let1 (distinct false _x1))) (let ((_let2 (= _x0 _let1))) (or (=> (= (=> _let2 _x1) _let2) _let2) (ite _x4 _let0 _x2) (=> _let1 _let0 _x3))))))
;; EXPECTED: (check-sat)
;; EXPECTED: (exit)