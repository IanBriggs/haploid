(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |

   The benchmark encodes 5 simple processors
   receiving instructions to decode and execute.
   The processors compute the same function on 6 operands but
   their decoding units differ in the way they
   communicate the result.
   We check that, modulo reinterpretation of the
   decoded instructions, the result is the same.
   We added a "mode" flag to force the decoding
   unit to return the result in two different ways.

   The encoded design is a modification of Example 11.2, at page 20 of
   "Introduction to Verilog", by Peter M. Nyasulu
   available online.

   Generated by Roberto Bruttomesso <roberto.bruttomesso@gmail.com>

|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun opcode () (_ BitVec 8))
(declare-fun operator1 () (_ BitVec 32))
(declare-fun opr1_1 () (_ BitVec 32))
(declare-fun op1_1 () (_ BitVec 32))
(declare-fun opr1_2 () (_ BitVec 32))
(declare-fun op1_2 () (_ BitVec 32))
(declare-fun opr1_3 () (_ BitVec 32))
(declare-fun op1_3 () (_ BitVec 32))
(declare-fun opr1_4 () (_ BitVec 32))
(declare-fun op1_4 () (_ BitVec 32))
(declare-fun opr1_5 () (_ BitVec 32))
(declare-fun op1_5 () (_ BitVec 32))
(declare-fun operator2 () (_ BitVec 32))
(declare-fun opr2_1 () (_ BitVec 32))
(declare-fun op2_1 () (_ BitVec 32))
(declare-fun opr2_2 () (_ BitVec 32))
(declare-fun op2_2 () (_ BitVec 32))
(declare-fun opr2_3 () (_ BitVec 32))
(declare-fun op2_3 () (_ BitVec 32))
(declare-fun opr2_4 () (_ BitVec 32))
(declare-fun op2_4 () (_ BitVec 32))
(declare-fun opr2_5 () (_ BitVec 32))
(declare-fun op2_5 () (_ BitVec 32))
(declare-fun operator3 () (_ BitVec 32))
(declare-fun opr3_1 () (_ BitVec 32))
(declare-fun op3_1 () (_ BitVec 32))
(declare-fun opr3_2 () (_ BitVec 32))
(declare-fun op3_2 () (_ BitVec 32))
(declare-fun opr3_3 () (_ BitVec 32))
(declare-fun op3_3 () (_ BitVec 32))
(declare-fun opr3_4 () (_ BitVec 32))
(declare-fun op3_4 () (_ BitVec 32))
(declare-fun opr3_5 () (_ BitVec 32))
(declare-fun op3_5 () (_ BitVec 32))
(declare-fun operator4 () (_ BitVec 32))
(declare-fun opr4_1 () (_ BitVec 32))
(declare-fun op4_1 () (_ BitVec 32))
(declare-fun opr4_2 () (_ BitVec 32))
(declare-fun op4_2 () (_ BitVec 32))
(declare-fun opr4_3 () (_ BitVec 32))
(declare-fun op4_3 () (_ BitVec 32))
(declare-fun opr4_4 () (_ BitVec 32))
(declare-fun op4_4 () (_ BitVec 32))
(declare-fun opr4_5 () (_ BitVec 32))
(declare-fun op4_5 () (_ BitVec 32))
(declare-fun operator5 () (_ BitVec 32))
(declare-fun opr5_1 () (_ BitVec 32))
(declare-fun op5_1 () (_ BitVec 32))
(declare-fun opr5_2 () (_ BitVec 32))
(declare-fun op5_2 () (_ BitVec 32))
(declare-fun opr5_3 () (_ BitVec 32))
(declare-fun op5_3 () (_ BitVec 32))
(declare-fun opr5_4 () (_ BitVec 32))
(declare-fun op5_4 () (_ BitVec 32))
(declare-fun opr5_5 () (_ BitVec 32))
(declare-fun op5_5 () (_ BitVec 32))
(declare-fun operator6 () (_ BitVec 32))
(declare-fun opr6_1 () (_ BitVec 32))
(declare-fun op6_1 () (_ BitVec 32))
(declare-fun opr6_2 () (_ BitVec 32))
(declare-fun op6_2 () (_ BitVec 32))
(declare-fun opr6_3 () (_ BitVec 32))
(declare-fun op6_3 () (_ BitVec 32))
(declare-fun opr6_4 () (_ BitVec 32))
(declare-fun op6_4 () (_ BitVec 32))
(declare-fun opr6_5 () (_ BitVec 32))
(declare-fun op6_5 () (_ BitVec 32))
(declare-fun decode_1 () (_ BitVec 193))
(declare-fun dec_func_1 () (_ BitVec 1))
(declare-fun deci_func_1 () (_ BitVec 1))
(declare-fun func_1 () (_ BitVec 1))
(declare-fun out_1 () (_ BitVec 32))
(declare-fun mode_1 () (_ BitVec 1))
(declare-fun decode_2 () (_ BitVec 193))
(declare-fun dec_func_2 () (_ BitVec 1))
(declare-fun deci_func_2 () (_ BitVec 1))
(declare-fun func_2 () (_ BitVec 1))
(declare-fun out_2 () (_ BitVec 32))
(declare-fun mode_2 () (_ BitVec 1))
(declare-fun decode_3 () (_ BitVec 193))
(declare-fun dec_func_3 () (_ BitVec 1))
(declare-fun deci_func_3 () (_ BitVec 1))
(declare-fun func_3 () (_ BitVec 1))
(declare-fun out_3 () (_ BitVec 32))
(declare-fun mode_3 () (_ BitVec 1))
(declare-fun decode_4 () (_ BitVec 193))
(declare-fun dec_func_4 () (_ BitVec 1))
(declare-fun deci_func_4 () (_ BitVec 1))
(declare-fun func_4 () (_ BitVec 1))
(declare-fun out_4 () (_ BitVec 32))
(declare-fun mode_4 () (_ BitVec 1))
(declare-fun decode_5 () (_ BitVec 193))
(declare-fun dec_func_5 () (_ BitVec 1))
(declare-fun deci_func_5 () (_ BitVec 1))
(declare-fun func_5 () (_ BitVec 1))
(declare-fun out_5 () (_ BitVec 32))
(declare-fun mode_5 () (_ BitVec 1))
(assert (let ((?v_12 (= opr1_1 operator1)) (?v_13 (= opcode (_ bv136 8))) (?v_5 (= dec_func_1 (_ bv1 1))) (?v_0 (= opr2_1 operator2)) (?v_1 (= opr3_1 operator3)) (?v_2 (= opr4_1 operator4)) (?v_3 (= opr5_1 operator5)) (?v_4 (= opr6_1 operator6)) (?v_14 (= opcode (_ bv137 8))) (?v_6 (= dec_func_1 (_ bv0 1))) (?v_15 (= opcode (_ bv138 8))) (?v_7 (= opr2_1 (_ bv1 32))) (?v_8 (= opr3_1 (_ bv1 32))) (?v_9 (= opr4_1 (_ bv1 32))) (?v_10 (= opr5_1 (_ bv1 32))) (?v_11 (= opr6_1 (_ bv1 32))) (?v_16 (= deci_func_1 (_ bv1 1))) (?v_17 (= deci_func_1 (_ bv0 1))) (?v_18 (= mode_1 (_ bv0 1))) (?v_19 (= func_1 ((_ extract 192 192) decode_1))) (?v_20 ((_ extract 191 160) decode_1)) (?v_21 ((_ extract 159 128) decode_1)) (?v_22 ((_ extract 127 96) decode_1)) (?v_23 ((_ extract 95 64) decode_1)) (?v_24 ((_ extract 63 32) decode_1)) (?v_25 ((_ extract 31 0) decode_1)) (?v_38 (= opr1_2 operator1)) (?v_31 (= dec_func_2 (_ bv1 1))) (?v_26 (= opr2_2 operator2)) (?v_27 (= opr3_2 operator3)) (?v_28 (= opr4_2 operator4)) (?v_29 (= opr5_2 operator5)) (?v_30 (= opr6_2 operator6)) (?v_32 (= dec_func_2 (_ bv0 1))) (?v_33 (= opr2_2 (_ bv1 32))) (?v_34 (= opr3_2 (_ bv1 32))) (?v_35 (= opr4_2 (_ bv1 32))) (?v_36 (= opr5_2 (_ bv1 32))) (?v_37 (= opr6_2 (_ bv1 32))) (?v_39 (= deci_func_2 (_ bv1 1))) (?v_40 (= deci_func_2 (_ bv0 1))) (?v_41 (= mode_2 (_ bv0 1))) (?v_42 ((_ extract 192 161) decode_2)) (?v_43 (= func_2 ((_ extract 160 160) decode_2))) (?v_44 ((_ extract 159 128) decode_2)) (?v_45 ((_ extract 127 96) decode_2)) (?v_46 ((_ extract 95 64) decode_2)) (?v_47 ((_ extract 63 32) decode_2)) (?v_48 ((_ extract 31 0) decode_2)) (?v_61 (= opr1_3 operator1)) (?v_54 (= dec_func_3 (_ bv1 1))) (?v_49 (= opr2_3 operator2)) (?v_50 (= opr3_3 operator3)) (?v_51 (= opr4_3 operator4)) (?v_52 (= opr5_3 operator5)) (?v_53 (= opr6_3 operator6)) (?v_55 (= dec_func_3 (_ bv0 1))) (?v_56 (= opr2_3 (_ bv1 32))) (?v_57 (= opr3_3 (_ bv1 32))) (?v_58 (= opr4_3 (_ bv1 32))) (?v_59 (= opr5_3 (_ bv1 32))) (?v_60 (= opr6_3 (_ bv1 32))) (?v_62 (= deci_func_3 (_ bv1 1))) (?v_63 (= deci_func_3 (_ bv0 1))) (?v_64 (= mode_3 (_ bv0 1))) (?v_65 ((_ extract 192 161) decode_3)) (?v_66 ((_ extract 160 129) decode_3)) (?v_67 (= func_3 ((_ extract 128 128) decode_3))) (?v_68 ((_ extract 127 96) decode_3)) (?v_69 ((_ extract 95 64) decode_3)) (?v_70 ((_ extract 63 32) decode_3)) (?v_71 ((_ extract 31 0) decode_3)) (?v_84 (= opr1_4 operator1)) (?v_77 (= dec_func_4 (_ bv1 1))) (?v_72 (= opr2_4 operator2)) (?v_73 (= opr3_4 operator3)) (?v_74 (= opr4_4 operator4)) (?v_75 (= opr5_4 operator5)) (?v_76 (= opr6_4 operator6)) (?v_78 (= dec_func_4 (_ bv0 1))) (?v_79 (= opr2_4 (_ bv1 32))) (?v_80 (= opr3_4 (_ bv1 32))) (?v_81 (= opr4_4 (_ bv1 32))) (?v_82 (= opr5_4 (_ bv1 32))) (?v_83 (= opr6_4 (_ bv1 32))) (?v_85 (= deci_func_4 (_ bv1 1))) (?v_86 (= deci_func_4 (_ bv0 1))) (?v_87 (= mode_4 (_ bv0 1))) (?v_88 ((_ extract 192 161) decode_4)) (?v_89 ((_ extract 160 129) decode_4)) (?v_90 ((_ extract 128 97) decode_4)) (?v_91 (= func_4 ((_ extract 96 96) decode_4))) (?v_92 ((_ extract 95 64) decode_4)) (?v_93 ((_ extract 63 32) decode_4)) (?v_94 ((_ extract 31 0) decode_4)) (?v_107 (= opr1_5 operator1)) (?v_100 (= dec_func_5 (_ bv1 1))) (?v_95 (= opr2_5 operator2)) (?v_96 (= opr3_5 operator3)) (?v_97 (= opr4_5 operator4)) (?v_98 (= opr5_5 operator5)) (?v_99 (= opr6_5 operator6)) (?v_101 (= dec_func_5 (_ bv0 1))) (?v_102 (= opr2_5 (_ bv1 32))) (?v_103 (= opr3_5 (_ bv1 32))) (?v_104 (= opr4_5 (_ bv1 32))) (?v_105 (= opr5_5 (_ bv1 32))) (?v_106 (= opr6_5 (_ bv1 32))) (?v_108 (= deci_func_5 (_ bv1 1))) (?v_109 (= deci_func_5 (_ bv0 1))) (?v_110 (= mode_5 (_ bv0 1))) (?v_111 ((_ extract 192 161) decode_5)) (?v_112 ((_ extract 160 129) decode_5)) (?v_113 ((_ extract 128 97) decode_5)) (?v_114 ((_ extract 96 65) decode_5)) (?v_115 (= func_5 ((_ extract 64 64) decode_5))) (?v_116 ((_ extract 63 32) decode_5)) (?v_117 ((_ extract 31 0) decode_5))) (and ?v_12 (ite ?v_13 (and ?v_5 ?v_0 ?v_1 ?v_2 ?v_3 ?v_4) (ite ?v_14 (and ?v_6 ?v_0 ?v_1 ?v_2 ?v_3 ?v_4) (ite ?v_15 (and ?v_5 ?v_7 ?v_8 ?v_9 ?v_10 ?v_11) (and ?v_6 ?v_7 ?v_8 ?v_9 ?v_10 ?v_11)))) ?v_12 (ite ?v_13 (and ?v_16 ?v_0 ?v_1 ?v_2 ?v_3 ?v_4) (ite ?v_14 (and ?v_17 ?v_0 ?v_1 ?v_2 ?v_3 ?v_4) (ite ?v_15 (and ?v_16 ?v_7 ?v_8 ?v_9 ?v_10 ?v_11) (and ?v_17 ?v_7 ?v_8 ?v_9 ?v_10 ?v_11)))) (ite ?v_18 (= decode_1 (concat (concat (concat (concat (concat (concat dec_func_1 opr1_1) opr2_1) opr3_1) opr4_1) opr5_1) opr6_1)) (= decode_1 (concat (concat (concat (concat (concat (concat deci_func_1 opr6_1) opr5_1) opr4_1) opr3_1) opr2_1) opr1_1))) (ite ?v_18 (and ?v_19 (= op1_1 ?v_20) (= op2_1 ?v_21) (= op3_1 ?v_22) (= op4_1 ?v_23) (= op5_1 ?v_24) (= op6_1 ?v_25)) (and ?v_19 (= op6_1 ?v_20) (= op5_1 ?v_21) (= op4_1 ?v_22) (= op3_1 ?v_23) (= op2_1 ?v_24) (= op1_1 ?v_25))) (ite (= func_1 (_ bv1 1)) (= out_1 (bvadd (bvadd (bvadd (bvadd (bvadd op1_1 op2_1) op3_1) op4_1) op5_1) op6_1)) (= out_1 (bvor (bvor (bvor (bvor (bvor op1_1 op2_1) op3_1) op4_1) op5_1) op6_1))) ?v_38 (ite ?v_13 (and ?v_31 ?v_26 ?v_27 ?v_28 ?v_29 ?v_30) (ite ?v_14 (and ?v_32 ?v_26 ?v_27 ?v_28 ?v_29 ?v_30) (ite ?v_15 (and ?v_31 ?v_33 ?v_34 ?v_35 ?v_36 ?v_37) (and ?v_32 ?v_33 ?v_34 ?v_35 ?v_36 ?v_37)))) ?v_38 (ite ?v_13 (and ?v_39 ?v_26 ?v_27 ?v_28 ?v_29 ?v_30) (ite ?v_14 (and ?v_40 ?v_26 ?v_27 ?v_28 ?v_29 ?v_30) (ite ?v_15 (and ?v_39 ?v_33 ?v_34 ?v_35 ?v_36 ?v_37) (and ?v_40 ?v_33 ?v_34 ?v_35 ?v_36 ?v_37)))) (ite ?v_41 (= decode_2 (concat (concat (concat (concat (concat (concat opr1_2 dec_func_2) opr2_2) opr3_2) opr4_2) opr5_2) opr6_2)) (= decode_2 (concat (concat (concat (concat (concat (concat opr6_2 deci_func_2) opr5_2) opr4_2) opr3_2) opr2_2) opr1_2))) (ite ?v_41 (and (= op1_2 ?v_42) ?v_43 (= op2_2 ?v_44) (= op3_2 ?v_45) (= op4_2 ?v_46) (= op5_2 ?v_47) (= op6_2 ?v_48)) (and (= op6_2 ?v_42) ?v_43 (= op5_2 ?v_44) (= op4_2 ?v_45) (= op3_2 ?v_46) (= op2_2 ?v_47) (= op1_2 ?v_48))) (ite (= func_2 (_ bv1 1)) (= out_2 (bvadd (bvadd (bvadd (bvadd (bvadd op1_2 op2_2) op3_2) op4_2) op5_2) op6_2)) (= out_2 (bvor (bvor (bvor (bvor (bvor op1_2 op2_2) op3_2) op4_2) op5_2) op6_2))) ?v_61 (ite ?v_13 (and ?v_54 ?v_49 ?v_50 ?v_51 ?v_52 ?v_53) (ite ?v_14 (and ?v_55 ?v_49 ?v_50 ?v_51 ?v_52 ?v_53) (ite ?v_15 (and ?v_54 ?v_56 ?v_57 ?v_58 ?v_59 ?v_60) (and ?v_55 ?v_56 ?v_57 ?v_58 ?v_59 ?v_60)))) ?v_61 (ite ?v_13 (and ?v_62 ?v_49 ?v_50 ?v_51 ?v_52 ?v_53) (ite ?v_14 (and ?v_63 ?v_49 ?v_50 ?v_51 ?v_52 ?v_53) (ite ?v_15 (and ?v_62 ?v_56 ?v_57 ?v_58 ?v_59 ?v_60) (and ?v_63 ?v_56 ?v_57 ?v_58 ?v_59 ?v_60)))) (ite ?v_64 (= decode_3 (concat (concat (concat (concat (concat (concat opr1_3 opr2_3) dec_func_3) opr3_3) opr4_3) opr5_3) opr6_3)) (= decode_3 (concat (concat (concat (concat (concat (concat opr6_3 opr5_3) deci_func_3) opr4_3) opr3_3) opr2_3) opr1_3))) (ite ?v_64 (and (= op1_3 ?v_65) (= op2_3 ?v_66) ?v_67 (= op3_3 ?v_68) (= op4_3 ?v_69) (= op5_3 ?v_70) (= op6_3 ?v_71)) (and (= op6_3 ?v_65) (= op5_3 ?v_66) ?v_67 (= op4_3 ?v_68) (= op3_3 ?v_69) (= op2_3 ?v_70) (= op1_3 ?v_71))) (ite (= func_3 (_ bv1 1)) (= out_3 (bvadd (bvadd (bvadd (bvadd (bvadd op1_3 op2_3) op3_3) op4_3) op5_3) op6_3)) (= out_3 (bvor (bvor (bvor (bvor (bvor op1_3 op2_3) op3_3) op4_3) op5_3) op6_3))) ?v_84 (ite ?v_13 (and ?v_77 ?v_72 ?v_73 ?v_74 ?v_75 ?v_76) (ite ?v_14 (and ?v_78 ?v_72 ?v_73 ?v_74 ?v_75 ?v_76) (ite ?v_15 (and ?v_77 ?v_79 ?v_80 ?v_81 ?v_82 ?v_83) (and ?v_78 ?v_79 ?v_80 ?v_81 ?v_82 ?v_83)))) ?v_84 (ite ?v_13 (and ?v_85 ?v_72 ?v_73 ?v_74 ?v_75 ?v_76) (ite ?v_14 (and ?v_86 ?v_72 ?v_73 ?v_74 ?v_75 ?v_76) (ite ?v_15 (and ?v_85 ?v_79 ?v_80 ?v_81 ?v_82 ?v_83) (and ?v_86 ?v_79 ?v_80 ?v_81 ?v_82 ?v_83)))) (ite ?v_87 (= decode_4 (concat (concat (concat (concat (concat (concat opr1_4 opr2_4) opr3_4) dec_func_4) opr4_4) opr5_4) opr6_4)) (= decode_4 (concat (concat (concat (concat (concat (concat opr6_4 opr5_4) opr4_4) deci_func_4) opr3_4) opr2_4) opr1_4))) (ite ?v_87 (and (= op1_4 ?v_88) (= op2_4 ?v_89) (= op3_4 ?v_90) ?v_91 (= op4_4 ?v_92) (= op5_4 ?v_93) (= op6_4 ?v_94)) (and (= op6_4 ?v_88) (= op5_4 ?v_89) (= op4_4 ?v_90) ?v_91 (= op3_4 ?v_92) (= op2_4 ?v_93) (= op1_4 ?v_94))) (ite (= func_4 (_ bv1 1)) (= out_4 (bvadd (bvadd (bvadd (bvadd (bvadd op1_4 op2_4) op3_4) op4_4) op5_4) op6_4)) (= out_4 (bvor (bvor (bvor (bvor (bvor op1_4 op2_4) op3_4) op4_4) op5_4) op6_4))) ?v_107 (ite ?v_13 (and ?v_100 ?v_95 ?v_96 ?v_97 ?v_98 ?v_99) (ite ?v_14 (and ?v_101 ?v_95 ?v_96 ?v_97 ?v_98 ?v_99) (ite ?v_15 (and ?v_100 ?v_102 ?v_103 ?v_104 ?v_105 ?v_106) (and ?v_101 ?v_102 ?v_103 ?v_104 ?v_105 ?v_106)))) ?v_107 (ite ?v_13 (and ?v_108 ?v_95 ?v_96 ?v_97 ?v_98 ?v_99) (ite ?v_14 (and ?v_109 ?v_95 ?v_96 ?v_97 ?v_98 ?v_99) (ite ?v_15 (and ?v_108 ?v_102 ?v_103 ?v_104 ?v_105 ?v_106) (and ?v_109 ?v_102 ?v_103 ?v_104 ?v_105 ?v_106)))) (ite ?v_110 (= decode_5 (concat (concat (concat (concat (concat (concat opr1_5 opr2_5) opr3_5) opr4_5) dec_func_5) opr5_5) opr6_5)) (= decode_5 (concat (concat (concat (concat (concat (concat opr6_5 opr5_5) opr4_5) opr3_5) deci_func_5) opr2_5) opr1_5))) (ite ?v_110 (and (= op1_5 ?v_111) (= op2_5 ?v_112) (= op3_5 ?v_113) (= op4_5 ?v_114) ?v_115 (= op5_5 ?v_116) (= op6_5 ?v_117)) (and (= op6_5 ?v_111) (= op5_5 ?v_112) (= op4_5 ?v_113) (= op3_5 ?v_114) ?v_115 (= op2_5 ?v_116) (= op1_5 ?v_117))) (ite (= func_5 (_ bv1 1)) (= out_5 (bvadd (bvadd (bvadd (bvadd (bvadd op1_5 op2_5) op3_5) op4_5) op5_5) op6_5)) (= out_5 (bvor (bvor (bvor (bvor (bvor op1_5 op2_5) op3_5) op4_5) op5_5) op6_5))) (or (and (= mode_1 mode_2) (not (= out_1 out_2))) (and (= mode_1 mode_3) (not (= out_1 out_3))) (and (= mode_1 mode_4) (not (= out_1 out_4))) (and (= mode_1 mode_5) (not (= out_1 out_5))) (and (= mode_2 mode_3) (not (= out_2 out_3))) (and (= mode_2 mode_4) (not (= out_2 out_4))) (and (= mode_2 mode_5) (not (= out_2 out_5))) (and (= mode_3 mode_4) (not (= out_3 out_4))) (and (= mode_3 mode_5) (not (= out_3 out_5))) (and (= mode_4 mode_5) (not (= out_4 out_5)))))))
(check-sat)
(exit)
